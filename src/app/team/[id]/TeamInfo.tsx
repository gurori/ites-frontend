"use client";

import apiFetch from "@/lib/apiFetch";
import type { TeamProp } from "@/lib/types/ITeam";
import s from "./TeamInfo.module.css";
import { useRouter, useSearchParams } from "next/navigation";
import { toast } from "sonner";
import MemberInfo from "./MmeberInfo";
import { LogInIcon, UserRoundPlusIcon } from "lucide-react";

export default function TeamInfo({
  team,
  token,
}: Readonly<TeamProp & { token: string }>) {
  const admin = team.members.find((u) => u.id === team.adminId);
  const { push } = useRouter();
  const mode = useSearchParams().get("mode");
  const handleInvite = async () => {
    await navigator.clipboard.writeText(
      `–ü—Ä–∏–≤–µ—Ç! üëã\n\n–ù–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ üíª "${team.name}" –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å–∏–ª—ã üöÄ\n\nhttps://ites.vercel.app/team/${team.id}?mode=invite`
    );
    toast("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!");
  };
  const addApplication = async () => {
    await apiFetch(`/api/teams/application/${team.id}`, {
      method: "PUT",
      credentials: "include",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
    }).then(async (res) => {
      console.log(res);
      if (res.ok) {
        toast("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", {
          description: `–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã "${team.name}" –ø—Ä–∏–º–µ—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É`,
        });
        push("/main/teams");
      } else if (res.status === 403) {
        toast("–ù—É–∂–Ω–æ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏");
        push("/profile");
      } else push("/login");
    });
  };
  return (
    <div className={s.card}>
      <h4 className={s.name}>{team.name}</h4>
      <div className="flex justify-between">
        <p className={s.gray}>–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {team.members.length}</p>
        <p className={s.gray}>–ê–¥–º–∏–Ω: {admin?.firstName}</p>
      </div>
      <div className="flex flex-wrap gap-[43px] pt-20">
        {team.members.map((m) => (
          <MemberInfo user={m} key={m.id} />
        ))}
      </div>
      <div className="grid gap-4 place-items-start pt-16">
        {mode === "member" && (
          <button onClick={handleInvite} className={s.invite}>
            –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å <UserRoundPlusIcon />
          </button>
        )}
        {mode === "invite" && (
          <button onClick={addApplication} className={s.join}>
            –í—Å—Ç—É–ø–∏—Ç—å <LogInIcon />
          </button>
        )}
      </div>
    </div>
  );
}
